# # -*- coding: utf-8 -*-
# import telebot
# from telebot import types
# import random
# from baza import *
#
#
# BOT_TOKEN = "8061663619:AAEsLjXPTiq59wQaLHazJyKKwPc-TXCIWpc"
# bot = telebot.TeleBot(BOT_TOKEN)
#
#
#
# @bot.message_handler(commands=['start'])
# def start(message):
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     keyboard.row("–ò–¥–µ–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
#     keyboard.row("–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è AI")
#     keyboard.row("–®–∞–±–ª–æ–Ω—ã")
#     keyboard.row("–ú–µ–º—ã")
#     keyboard.row("–°–ª—É—á–∞–π–Ω–∞—è –∏–¥–µ—è")
#
#     bot.send_message(
#         message.chat.id,
#         "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
#         reply_markup=keyboard
#     )
#
#
# @bot.message_handler(func=lambda message: message.text == "–ò–¥–µ–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
# def content(message):
#     idea = random.choice(content_ideas)
#     bot.send_message(message.chat.id, idea)
#
#
# @bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è AI")
# def ai(message):
#     prompt = random.choice(ai_prompts)
#     bot.send_message(message.chat.id, prompt)
#
#
# @bot.message_handler(func=lambda message: message.text == "–®–∞–±–ª–æ–Ω—ã")
# def template(message):
#     template = random.choice(templates)
#     bot.send_message(message.chat.id, template)
#
#
# @bot.message_handler(func=lambda message: message.text == "–ú–µ–º—ã")
# def meme(message):
#     meme = random.choice(meme_ideas)
#     bot.send_message(message.chat.id, meme)
#
#
# @bot.message_handler(func=lambda message: message.text == "–°–ª—É—á–∞–π–Ω–∞—è –∏–¥–µ—è")
# def random_idea(message):
#     all_ideas = content_ideas + ai_prompts + templates + meme_ideas
#     idea = random.choice(all_ideas)
#     bot.send_message(message.chat.id, idea)
#
#
# @bot.message_handler(func=lambda message: True)
# def other(message):
#     bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /start")
#
#
# if __name__ == "__main__":
#     bot.infinity_polling()

import telebot
from telebot import types

bot = telebot.TeleBot("8061663619:AAEsLjXPTiq59wQaLHazJyKKwPc-TXCIWpc")
USER_DATA = {}

DAILY_QUESTS = [
    "–£–±–∏—Ç—å 5 –æ–±—ã—á–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤",
    "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å 10 –∞—Ç–∞–∫",
    "–°–æ–≤–µ—Ä—à–∏—Ç—å 5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞—Ç–∞–∫",
    "–†–∞–∑–∂–µ—á—å –∫–æ—Å—Ç–µ—Ä",
    "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Å—Ç—É—Å –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏",
    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 3 –ø—Ä–µ–¥–º–µ—Ç–∞",
    "–ü—Ä–æ–±–µ–∂–∞—Ç—å 1000 —à–∞–≥–æ–≤"
]

ACHIEVEMENTS = {
    10: "–ü–µ—Ä–≤—ã–π —Ä—ã—Ü–∞—Ä—å",
    20: "–ò—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π",
    30: "–í–µ—Ç–µ—Ä–∞–Ω –±–∏—Ç–≤",
    40: "–•—Ä–∞–Ω–∏—Ç–µ–ª—å –æ–≥–Ω—è",
    50: "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ø–µ–ø–ª–∞"
}


def get_user_data(uid):
    if uid not in USER_DATA:
        USER_DATA[uid] = {
            'soul_level': 1,
            'quests_completed': 0,
            'daily_state': [False] * len(DAILY_QUESTS),
            'achievements': []
        }
    return USER_DATA[uid]


def check_achievements(user_data):
    new_achievements = []
    for level, achievement in ACHIEVEMENTS.items():
        if user_data['soul_level'] >= level and achievement not in user_data['achievements']:
            user_data['achievements'].append(achievement)
            new_achievements.append(achievement)
    return new_achievements


def create_daily_quests_buttons(state):
    keyboard = types.InlineKeyboardMarkup()
    for idx, (completed, quest) in enumerate(zip(state, DAILY_QUESTS)):
        status = "[X]" if completed else "[ ]"
        keyboard.row(types.InlineKeyboardButton(
            f"{status} {quest}",
            callback_data=f"quest:{idx}"
        ))
    return keyboard


def create_main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    return keyboard


def create_share_stats_button():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π", callback_data="share_stats"))
    return keyboard


def format_stats_for_share(user_data, username):
    share_text = f"üî• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ù–µ–≥–æ—Ä—è—â–µ–≥–æ {username}:\n\n"
    share_text += f"–£—Ä–æ–≤–µ–Ω—å –¥—É—à: {user_data['soul_level']}\n"
    share_text += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤: {user_data['quests_completed']}\n"

    if user_data['achievements']:
        share_text += f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(user_data['achievements'])}\n"
        share_text += "–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–≤–∞–Ω–∏—è:\n"
        for achievement in user_data['achievements']:
            share_text += f"‚Ä¢ {achievement}\n"

    share_text += "\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –≤ –õ–æ—Ç—Ä–∏–∫–µ!"
    return share_text


@bot.message_handler(commands=['start'])
def start_journey(message):
    user_data = get_user_data(message.from_user.id)
    bot.send_message(
        message.chat.id,
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–æ—Ç—Ä–∏–∫, –ù–µ–≥–æ—Ä—è—â–∏–π!\n\n"
        f"–£—Ä–æ–≤–µ–Ω—å –¥—É—à: {user_data['soul_level']}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è...",
        reply_markup=create_main_menu()
    )


@bot.message_handler(func=lambda message: message.text == "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã")
def show_daily_quests(message):
    user_data = get_user_data(message.from_user.id)
    bot.send_message(
        message.chat.id,
        "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –ù–µ–≥–æ—Ä—è—â–µ–≥–æ:\n–í—ã–ø–æ–ª–Ω–∏ –≤—Å–µ —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥—É—à\n",
        reply_markup=create_daily_quests_buttons(user_data['daily_state'])
    )


@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_stats(message):
    user_data = get_user_data(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    check_achievements(user_data)

    stats_text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ù–µ–≥–æ—Ä—è—â–µ–≥–æ:\n\n"
    stats_text += f"–£—Ä–æ–≤–µ–Ω—å –¥—É—à: {user_data['soul_level']}\n"
    stats_text += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤: {user_data['quests_completed']}\n\n"

    if user_data['achievements']:
        stats_text += "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
        for achievement in user_data['achievements']:
            stats_text += f"‚Ä¢ {achievement}\n"
    else:
        stats_text += "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: –ø–æ–∫–∞ –Ω–µ—Ç"

    bot.send_message(
        message.chat.id,
        stats_text,
        reply_markup=create_share_stats_button()
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("quest:"))
def complete_quest(call):
    idx = int(call.data.split(":")[1])
    user_data = get_user_data(call.from_user.id)

    if not user_data['daily_state'][idx]:
        user_data['daily_state'][idx] = True
        user_data['quests_completed'] += 1

        if all(user_data['daily_state']):
            user_data['soul_level'] += 1
            user_data['daily_state'] = [False] * len(DAILY_QUESTS)

            message_text = f"–í—Å–µ –∫–≤–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!\n\n–£—Ä–æ–≤–µ–Ω—å –¥—É—à –ø–æ–≤—ã—à–µ–Ω: {user_data['soul_level']}\n–ö–≤–µ—Å—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è..."

            bot.send_message(call.message.chat.id, message_text)

    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=create_daily_quests_buttons(user_data['daily_state'])
    )


@bot.callback_query_handler(func=lambda call: call.data == "share_stats")
def share_stats(call):
    user_data = get_user_data(call.from_user.id)
    username = call.from_user.first_name or "–ù–µ–≥–æ—Ä—è—â–∏–π"

    share_text = format_stats_for_share(user_data, username)

    bot.send_message(
        call.message.chat.id,
        "–í–æ—Ç —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—èÂàÜ‰∫´:\n\n" + share_text
    )


bot.polling(none_stop=True)